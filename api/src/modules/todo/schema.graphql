type Query {
  priorities: [Priority]!

  getTodo(id: ID!): Todo
  getTodos: [Todo]!
  getDatedTodos: [Todo]!
  getTodosByPriority(priority: ID!): [Todo]!
  getTodosByFolder(folder: ID!): [Todo]!
}

type Mutation {
  createPriority(name: String!, color: String!, order: Int!): Priority!
  updatePriority(id: ID!, name: String, color: String, order: Int): Priority!
  deletePriority(id: ID!, removeTodos: Boolean!, otherPriority: ID): Boolean!

  createTodo(text: String!, date: DateTime, priority: ID, file: ID): Todo!
  updateTodo(
    id: ID!
    text: String
    date: DateTime
    status: TodoStatus
    priority: ID
    file: ID
  ): Todo!
  dumpTodo(id: ID!): Boolean!
}

# Types

type Todo {
  todo_id: ID!

  text: String!
  date: DateTime
  status: TodoStatus!

  created_at: DateTime
  updated_at: DateTime

  files: [Files]
  user: User
  priority: Priority
}

enum TodoStatus {
  ACTIVE
  DONE
  DELETED
  DUMPED
}

type Priority {
  priority_id: ID!

  name: String!
  color: String!
  order: Int!

  created_at: DateTime!
  updated_at: DateTime!

  todos: [Todo]
  user: User
}
