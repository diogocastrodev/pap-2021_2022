// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  user_id        String @id @default(uuid()) @db.VarChar(255)
  public_user_id String @unique @default(cuid()) @db.VarChar(255)

  username String @unique @db.VarChar(33)
  email    String @unique @db.VarChar(255)
  password String @db.VarChar(255)

  roles Roles @default(USER)

  status UserStatus @default(PENDING)
  hash   String?    @default(uuid())

  created_at DateTime @default(now()) @db.Timestamp()
  updated_at DateTime @updatedAt @db.Timestamp()

  folders  folders[]
  todo     todo[]
  priority priority[]
}

enum Roles {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum ColorStyle {
  RGBA
  RGB
  HEX
}

model folders {
  folder_id String @id @default(uuid()) @db.VarChar(255)
  name      String @db.VarChar(80)

  color       String     @default("0 0 0 0") @db.VarChar(20)
  color_style ColorStyle @default(RGBA)

  created_at DateTime @default(now()) @db.Timestamp()
  updated_at DateTime @updatedAt @db.Timestamp()

  // Antipattern - Depend of a parent
  parent_id     String?   @db.VarChar(255)
  parent_folder folders?  @relation("subfolder", fields: [parent_id], references: [folder_id])
  folders       folders[] @relation("subfolder")

  // User
  user_id String @db.VarChar(255)
  user    user   @relation(fields: [user_id], references: [user_id])

  // Items
  files files[]
}

model files {
  file_id String @id @default(uuid()) @db.VarChar(255)

  name String @db.VarChar(80)

  fileType fileType @default(Document)

  folders   folders @relation(fields: [folder_id], references: [folder_id])
  folder_id String  @db.VarChar(255)

  created_at DateTime @default(now()) @db.Timestamp()
  updated_at DateTime @updatedAt @db.Timestamp()

  // todos
  todos    todo[]
  document document[]
}

enum fileType {
  TODO
  Document
}

model document {
  document_id String @id @default(uuid()) @db.VarChar(255)

  content String @db.Text()

  created_at DateTime @default(now()) @db.Timestamp()
  updated_at DateTime @updatedAt @db.Timestamp()

  files   files  @relation(fields: [file_id], references: [file_id])
  file_id String @db.VarChar(255)
}

model todo {
  todo_id String @id @default(uuid()) @db.VarChar(255)

  todoText String @db.Text

  status TodoStatus

  created_at DateTime @default(now()) @db.Timestamp()
  updated_at DateTime @updatedAt @db.Timestamp()

  user    user   @relation(fields: [user_id], references: [user_id])
  user_id String @db.VarChar(255)

  files   files?  @relation(fields: [file_id], references: [file_id])
  file_id String? @db.VarChar(255)

  priority            priority? @relation(fields: [priorityPriority_id], references: [priority_id])
  priorityPriority_id String?   @db.VarChar(255)
}

model priority {
  priority_id String @id @default(uuid()) @db.VarChar(255)

  name  String @db.VarChar(80)
  color String @db.VarChar(6)

  created_at DateTime @default(now()) @db.Timestamp()
  updated_at DateTime @updatedAt @db.Timestamp()

  userId String @db.VarChar(255)
  user   user   @relation(fields: [userId], references: [user_id])

  todos todo[]
}

enum TodoStatus {
  ACTIVE
  DONE
  DELETED
}
