// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------------------------------------------------------
//                                   Models
// --------------------------------------------------------------------------

model user {
  user_id        String @id @default(uuid()) @db.Uuid()
  public_user_id String @unique @default(cuid()) @db.VarChar(255)

  email    String @unique @db.VarChar(255)
  password String @db.VarChar(255)

  name    String @db.VarChar(255)
  surname String @db.VarChar(255)

  location String? @db.VarChar(255)

  phone_number String? @db.VarChar(255)

  haveAvatar Boolean @default(false) @db.Boolean()
  avatar     String? @unique @db.VarChar(255)

  status UserStatus @default(PENDING)

  hash          String  @unique @db.VarChar(255)
  emailVerified Boolean @default(false) @db.Boolean()

  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @updatedAt @db.Timestamp(0)

  product       product[]
  notifications notifications[]
  collections   collection[]
}

model notifications {
  notification_id String @id @default(uuid()) @db.Uuid()

  seen Boolean @default(false)

  user    user   @relation(fields: [user_id], references: [user_id])
  user_id String @db.Uuid
}

model notifications_types {
  notification_type_id String @id @default(uuid()) @db.Uuid()

  type  String              @db.VarChar(255)
  style notification_styles
}

model collection {
  collection_id String @id @default(uuid()) @db.Uuid()

  name String @db.VarChar(255)

  user                user                  @relation(fields: [user_id], references: [user_id])
  user_id             String                @db.Uuid
  collections_product collections_product[]

  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @updatedAt @db.Timestamp(0)
}

model collections_product {
  collection_product_id String @id @default(uuid()) @db.Uuid()

  product    product @relation(fields: [product_id], references: [product_id])
  product_id String  @db.Uuid

  collection    collection @relation(fields: [collection_id], references: [collection_id])
  collection_id String     @db.Uuid

  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @updatedAt @db.Timestamp(0)
}

model product {
  product_id     String          @id @default(uuid()) @db.Uuid()
  title          String          @db.VarChar(255)
  titleExtraInfo String?         @db.VarChar(255)
  description    String          @db.Text
  location       String          @db.VarChar(255)
  sellType       productSellType @default(SELL)
  price          Float?          @db.Real

  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @updatedAt @db.Timestamp(0)

  user_id String @db.Uuid()
  user    user   @relation(fields: [user_id], references: [user_id])

  product_status ProductStatus @default(ACTIVE)

  product_images       product_images[]
  collections_products collections_product[]

  haveImages Boolean @default(false) @db.Boolean()
}

model product_images {
  product_image_id String  @id @default(uuid()) @db.Uuid()
  image_url        String  @db.VarChar(255)
  product_id       String  @db.Uuid()
  product          product @relation(fields: [product_id], references: [product_id])
}

// --------------------------------------------------------------------------
//                                    Enums
// --------------------------------------------------------------------------

enum notification_styles {
  VERIFICATION
  SUCCESS
  ERROR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum productSellType {
  TRADE
  SELL
}
