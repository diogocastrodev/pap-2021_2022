generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  user_id        String      @id @default(uuid()) @db.VarChar(255)
  public_user_id String      @unique @default(cuid()) @db.VarChar(255)
  email          String      @unique @db.VarChar(255)
  password       String      @db.VarChar(255)
  roles          Roles       @default(USER)
  status         UserStatus  @default(ACTIVE)
  hash           String?     @default(uuid())
  created_at     DateTime    @default(now()) @db.Timestamp(6)
  updated_at     DateTime    @updatedAt @db.Timestamp(6)
  folders        folders[]
  priority       priority[]
  todo           todo[]
  cdnImages      cdnImages[]
}

model folders {
  folder_id     String    @id @default(uuid()) @db.VarChar(255)
  name          String    @db.VarChar(80)
  color         String    @default("#5F5F5F") @db.VarChar(7)
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime  @updatedAt @db.Timestamp(6)
  parent_id     String?   @db.VarChar(255)
  user_id       String    @db.VarChar(255)
  parent_folder folders?  @relation("subfolder", fields: [parent_id], references: [folder_id], onDelete: Cascade)
  user          user      @relation(fields: [user_id], references: [user_id])
  files         files[]
  folders       folders[] @relation("subfolder")
}

model files {
  file_id    String    @id @default(uuid()) @db.VarChar(255)
  name       String    @db.VarChar(80)
  fileType   fileType  @default(Document)
  folder_id  String    @db.VarChar(255)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @updatedAt @db.Timestamp(6)
  folders    folders   @relation(fields: [folder_id], references: [folder_id], onDelete: Cascade)
  document   document?
  todos      todo[]
}

model document {
  document_id String   @id @default(uuid()) @db.VarChar(255)
  content     String   @db.Text
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @updatedAt @db.Timestamp(6)
  file_id     String   @unique @db.VarChar(255)
  files       files    @relation(fields: [file_id], references: [file_id], onDelete: Cascade)
}

model todo {
  todo_id             String     @id @default(uuid()) @db.VarChar(255)
  text                String     @db.Text
  date                DateTime?  @db.Timestamp(6)
  status              TodoStatus @default(ACTIVE)
  created_at          DateTime   @default(now()) @db.Timestamp(6)
  updated_at          DateTime   @updatedAt @db.Timestamp(6)
  user_id             String     @db.VarChar(255)
  file_id             String?    @db.VarChar(255)
  priorityPriority_id String?    @db.VarChar(255)
  files               files?     @relation(fields: [file_id], references: [file_id], onDelete: Cascade)
  priority            priority?  @relation(fields: [priorityPriority_id], references: [priority_id])
  user                user       @relation(fields: [user_id], references: [user_id])
}

model priority {
  priority_id String   @id @default(uuid()) @db.VarChar(255)
  name        String   @db.VarChar(80)
  color       String   @default("#5F5F5F") @db.VarChar(7)
  order       Int      @default(0) @db.SmallInt()
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @updatedAt @db.Timestamp(6)
  userId      String   @db.VarChar(255)
  user        user     @relation(fields: [userId], references: [user_id])
  todos       todo[]
}

model cdnImages {
  image_id     String   @id @default(uuid()) @db.VarChar(255)
  name         String   @db.Text
  path         String   @db.Text
  type         String   @db.VarChar(255)
  pathWithName String   @db.Text
  created_at   DateTime @default(now()) @db.Timestamp()
  user_id      String   @db.VarChar(255)
  user         user     @relation(fields: [user_id], references: [user_id])
}

enum Roles {
  ADMIN // admin user
  USER // normal user
}

enum UserStatus {
  ACTIVE // Available to login
  INACTIVE // Not available to login
  PENDING // Pending email confirmation
}

enum fileType {
  TODO // List of Todos
  Document // Document type
}

enum TodoStatus {
  ACTIVE // To be done
  DONE // DONE
  DELETED // deleted by user but can be restored
  DUMPED // After deleted
}
